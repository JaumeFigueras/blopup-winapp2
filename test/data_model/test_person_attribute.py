#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json

from sqlalchemy.engine import Engine
from sqlalchemy.engine import Connection
from sqlalchemy.orm import Session

from typing import Tuple

from src.data_model.person import Person
from src.data_model.person_attribute import PersonAttribute
from src.data_model.person_attribute_type import PersonAttributeType


def test_init_00() -> None:
    """
    Tests the class constructor of a PersonName with all values
    """
    person_attribute = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_value',
        person='test_uuid_person',
        attribute_type='test_uuid_attribute_type',
    )
    assert person_attribute.open_mrs_uuid == 'test_uuid'
    assert person_attribute.value == 'test_value'
    assert person_attribute.person_open_mrs_uuid == 'test_uuid_person'
    assert person_attribute.person is None
    assert person_attribute.attribute_type_open_mrs_id == 'test_uuid_attribute_type'
    assert person_attribute.attribute_type is None

def test_init_01() -> None:
    """
    Tests the default class constructor without values
    """
    person_attribute = PersonAttribute()  # type: ignore
    assert person_attribute.open_mrs_uuid is None
    assert person_attribute.value is None
    assert person_attribute.person_open_mrs_uuid is None
    assert person_attribute.person is None
    assert person_attribute.attribute_type_open_mrs_id is None
    assert person_attribute.attribute_type is None

def test_init_02() -> None:
    """
    Tests the class constructor of a PersonName with unexpected attribute
    """
    person_attribute = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_value',
        person='test_uuid_person',
        attribute_type='test_uuid_attribute_type',
        unexpected='test_unexpected'  # type: ignore
    )
    assert person_attribute.open_mrs_uuid == 'test_uuid'
    assert person_attribute.value == 'test_value'
    assert person_attribute.person_open_mrs_uuid == 'test_uuid_person'
    assert person_attribute.person is None
    assert person_attribute.attribute_type_open_mrs_id == 'test_uuid_attribute_type'
    assert person_attribute.attribute_type is None
    assert getattr(person_attribute, 'unexpected', None) is None

def test_equals_01() -> None:
    """
    Tests the equality and inequality of two names

    :return: None
    """
    person_attribute_1 = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_value',
    )
    person_attribute_2 = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_value',
    )
    person_attribute_3 = PersonAttribute(
        open_mrs_uuid='test_uui',
        value='test_value',
    )
    person_attribute_4 = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_valu',
    )
    assert person_attribute_1 != 'qwerty'
    assert person_attribute_1 == person_attribute_2
    assert person_attribute_1 != person_attribute_3
    assert person_attribute_1 != person_attribute_4


def test_str_01() -> None:
    """
    Tests the string conversion of a PersonAttribute with all values set in the class attributes
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test_name',
    )
    person_attribute = PersonAttribute(
        open_mrs_uuid='test_uuid',
        value='test_value',
        attribute_type=person_attribute_type,
    )
    txt = ("Attribute:\n"
           "  UUID: test_uuid\n"
           "  Attribute type name: test_name\n"
           "  Value: test_value\n")
    assert str(person_attribute) == txt


def test_str_02() -> None:
    """
    Tests the string conversion of a PersonAttribute with all values set in the class attributes
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test_name',
    )
    person_attribute = PersonAttribute(
        open_mrs_uuid=None,
        value=None,
        attribute_type=person_attribute_type,
    )
    txt = ("Attribute:\n"
           "  UUID: None\n"
           "  Attribute type name: test_name\n"
           "  Value: None\n")
    assert str(person_attribute) == txt


def test_parse_list_01(person_attribute_list_string: str) -> None:
    """
    Tests the JSON parse of a list of person attributes.

    :param person_attribute_list_string: The response generated by OpenRMS when a Person attribute subresource list
    query is issued. The response has been generated using a real setup using postman from the request:

    https://blopup-dev.upc.edu/openmrs/ws/rest/v1/person/df290974-a2b3-42dc-96c0-ee3a67842a2f/attribute?v=custom:(uuid,value,attributeType:(uuid,name))

    :type person_attribute_list_string: str
    """
    person_attribute = json.loads(person_attribute_list_string, object_hook=PersonAttribute.object_hook_list_custom)
    print(person_attribute)
    assert person_attribute is not None
    assert type(person_attribute) is list
    assert len(person_attribute) == 2
    for name in person_attribute:
        assert isinstance(name, PersonAttribute)

