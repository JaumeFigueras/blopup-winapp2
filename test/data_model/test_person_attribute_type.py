#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json

from src.data_model.person_attribute_type import PersonAttributeType


def test_init_00() -> None:
    """
    Tests the class constructor of a PersonName with all values
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test name',
    )
    assert person_attribute_type.open_mrs_uuid == 'test_uuid'
    assert person_attribute_type.name == 'test name'


def test_init_01() -> None:
    """
    Tests the default class constructor without values
    """
    person_attribute_type = PersonAttributeType()  # type: ignore
    assert person_attribute_type.open_mrs_uuid is None
    assert person_attribute_type.name is None


def test_init_02() -> None:
    """
    Tests the class constructor of a PersonName with unexpected attribute
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test name',
        unexpected='test_unexpected'  # type: ignore
    )
    assert person_attribute_type.open_mrs_uuid == 'test_uuid'
    assert person_attribute_type.open_mrs_uuid == 'test_uuid'
    assert person_attribute_type.name == 'test name'
    assert getattr(person_attribute_type, 'unexpected', None) is None


def test_equals_01() -> None:
    """
    Tests equality of two attribute types
    
    :return: None 
    """
    person_attribute_type_1 = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test name'
    )
    person_attribute_type_2 = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test name'
    )
    person_attribute_type_3 = PersonAttributeType(
        open_mrs_uuid='test_uui',
        name='test name'
    )
    person_attribute_type_4 = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test nam'
    )
    assert person_attribute_type_1 != 1234
    assert person_attribute_type_1 == person_attribute_type_2
    assert person_attribute_type_1 != person_attribute_type_3
    assert person_attribute_type_1 != person_attribute_type_4


def test_str_01() -> None:
    """
    Tests the string conversion of a PersonAddress with all values set in the class attributes

    :return: None
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid='test_uuid',
        name='test name'
    )
    txt = ("Attribute Type:\n"
           "  UUID: test_uuid\n"
           "  Name: test name\n")
    assert str(person_attribute_type) == txt


def test_str_02() -> None:
    """
    Tests the string conversion of a PersonAddress with None values in the class attributes

    :return: None
    """
    person_attribute_type = PersonAttributeType(
        open_mrs_uuid=None,
        name=None
    )
    txt = ("Attribute Type:\n"
           "  UUID: None\n"
           "  Name: None\n")
    assert str(person_attribute_type) == txt


def test_parse_list_01(person_attribute_type_list_string: str) -> None:
    """
    Tests the JSON parse of a list of person addresses.

    :param person_attribute_type_list_string: The response generated by OpenRMS when a Person address subresource
    list query is issued. The response has been generated using a real setup using postman from the request:

    https://blopup-dev.upc.edu/openmrs/ws/rest/v1/person/df290974-a2b3-42dc-96c0-ee3a67842a2f/address?v=custom:(uuid,address1,cityVillage,stateProvince,country,postalCode,preferred,voided)

    :type person_attribute_type_list_string: str

    :return: None
    """
    person_attribute_type = json.loads(person_attribute_type_list_string,
                                       object_hook=PersonAttributeType.object_hook_list_custom)
    print(person_attribute_type)
    assert person_attribute_type is not None
    assert type(person_attribute_type) is list
    assert len(person_attribute_type) == 13
    for name in person_attribute_type:
        assert isinstance(name, PersonAttributeType)
